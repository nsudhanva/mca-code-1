#plot(v, type, col, xlab, ylab)
plot(x, type = "o")
hist(x)
#plot(v, type, col, xlab, ylab)
plot(x, type = "o")
#plot(v, type, col, xlab, ylab)
plot(x, type = "o", col = c("black", "red"), xlab = "type", ylab = "frequency")
#plot(v, type, col, xlab, ylab)
plot(x, type = "o", col = c("black", "red"), xlab = "frequency", ylab = "type")
v = c(7,12,28,3,41)
t = c(14,7,6,19,3)
y = c(1,4,5,4,6,6,6,6)
plot(y, type = "o")
#plot(v, type, col, xlab, ylab)
plot(x, type = "o", col = c("black", "red"), xlab = "frequency", ylab = "type")
lines(y, type = "o")
colors = c("green", "orange", "brown")
months = c("Mar", "Apr", "May", "Jun", "Jul")
regions = c("East","West","North")
values = matrix(c(2,9,3,11,9,4,8,7,3,12,5,2,8,10,11), nrow = 3, ncol = 5, byrow = TRUE)
barplot(values, main = "total revenue", names.arg = months.xlab = "month",ylab = "revenue", col = colors)
legend("topleft", regions, cex = 1.3, fill = colors)
barplot(table(y), col = c("red", "yellow", "green", "blue"))
colors = c("green", "orange", "brown")
months = c("Mar", "Apr", "May", "Jun", "Jul")
regions = c("East","West","North")
values = matrix(c(2,9,3,11,9,4,8,7,3,12,5,2,8,10,11), nrow = 3, ncol = 5, byrow = TRUE)
barplot(values, main = "total revenue", names.arg = months.xlab = "month",ylab = "revenue", col = colors)
legend("topleft", regions, cex = 1.3, fill = colors)
barplot(values, main = "total revenue", names.arg = months, xlab = "month", ylab = "revenue", col = colors)
legend("topleft", regions, cex = 1.3, fill = colors)
legend("topleft", regions, cex = 2, fill = colors)
legend("topleft", regions, cex = 1.3, fill = colors)
barplot(values, main = "total revenue", names.arg = months, xlab = "month", ylab = "revenue", col = colors)
legend("topleft", regions, cex = 1.3, fill = colors)
boxplot(BikeData$distance, data = BikeData, xlab = "distance", main = "Sales Data")
boxplot(x)
boxplot(BikeData$distance, data = BikeData, xlab = "distance", main = "Sales Data")
boxplot(values)
par(mfrow = c(3,2))
boxplot(values)
par(mfrow = c(3,2))
boxplot(BikeData$distance, data = BikeData, xlab = "distance", main = "Sales Data")
boxplot(values)
boxplot(BikeData$distance, data = BikeData, xlab = "distance", main = "Sales Data")
boxplot(BikeData$distance, data = BikeData, xlab = "distance", main = "Sales Data")
layout(matrix(c(1,2)), heights = c(2,1))
layout(1)
par(mfrow=c(1,1))
boxplot(values)
jpg(file = "mychart.jpg")
png(file = "mychart.jpg")
barplot(BikeData$distance, col = c("black", "red"), xlab = "distance", ylab = "distance measure", main = "distance travelled")
barplot(BikeData$distance, col = c("black", "red"), xlab = "distance", ylab = "distance measure", main = "distance travelled")
barplot(table(BikeData$student))
pie(table(BikeData$cyc_freq), col = c("red", "yellow", "green", "violet"), clockwise = TRUE)
barplot(BikeData$distance, col = c("black", "red"), xlab = "distance", ylab = "distance measure", main = "distance travelled")
table(BikeData$gender)
summary(BikeData$distance)
barplot(BikeData$distance)
barplot(BikeData$distance, col = c("black", "red"), xlab = "distance", ylab = "distance measure", main = "distance travelled")
barplot(table(BikeData$student))
y = table(BikeData$student)
barplot(y)
pie(y)
boxplot(x)
boxplot(BikeData$distance, data = BikeData, xlab = "distance", main = "Sales Data")
barplot(BikeData$distance)
barplot(BikeData$distance, col = c("black", "red"), xlab = "distance", ylab = "distance measure", main = "distance travelled")
pie(table(BikeData$cyc_freq), col = c("red", "yellow", "green", "violet"), clockwise = TRUE)
pie(table(BikeData$cyc_freq), col = c("red", "yellow", "green", "violet"))
hist(BikeData$speed, col = c("red", "yellow", "green", "violet"), xlab = "speed", ylab = "speed measured", main = "speed of riders")
x = data.frame(foo = 1:4, bar = c(F, T, F, F))
x$foo[x$bar==F]
x <- list(id = 1:4, bar = 0.6)
x = list(id = 1:4, bar = 0.6)
x
x[1]
x <- matrix(1:6, 2, 3)
x[1, ]
x <- c("a", "b", "c", "c", "d", "a")
x[c(1, 3, 4)]
x[1]
#Data consisting of two variables - bivariate data
#more than two variables - multivariate data
# most real time data is multivariate
# correlation coefficient - The statistical tool that measures the strength and direction of the linear relationship between two numerical variables
height = c(180,176,144,195,159,185,166,173,149,168)
weight = c(87,55,52,94,95,59,85,66,73,49,68)
plot(type = "p", height, weight)
height = c(180,176,144,195,159,185,166,173,149,168)
weight = c(87,55,52,94,95,59,85,66,73,49,68)
plot(type = "p", height, weight)
weight = c(87,55,52,94,95,59,85,66,73,49)
height = c(180,176,144,195,159,185,166,173,149,168)
weight = c(87,55,52,94,95,59,85,66,73,49)
plot(type = "p", height, weight)
plot(type = "o", height, weight)
plot(type = "l", height, weight)
plot(type = "p", height, weight)
install.packages(c("cli", "fansi", "R6", "Rcpp"))
> View(BikeData)
> View(BikeData)
View(BikeData)
cor(BikeData$distane,BikeData$time)
cor(BikeData$distane,BikeData$time)
cor(BikeData$distance,BikeData$time)
head(k1)
k1=BikeData[,c(2,7:9)]
head(k1)
cor(k1)
abline(lm(y~x))
abline(lm(BikeData$time~BikeData$speed))
install.packages("library")
install.packages("corrplot")
install.packages("rlang")
install.packages("library")
setRepositories(library())
setRepositories(library)
library(readr)
BullRiders <- read_csv("D:/Study/3rd Sem/IDS/BullRiders.csv")
View(BullRiders)
ncol(BullRiders)
bull_riders = read.csv('BullRiders.csv')
cor(bull_riders$CupPoints12, bull_riders$Earnings12)
cor(BullRiders$CupPoints12, BullRiders$Earnings12)
BullRiders<-read.csv("BullRiders.csv")
plot(new_bull12$Earnings12,new_bull12$RidePer12)
new_bull12 = BullRiders
plot(new_bull12$Earnings12,new_bull12$RidePer12)
result = BullRiders
plot(result$Earnings12,result$RidePer12)
plot(result$Earnings12,result$RidePer12)
vars <-c("Earnings12", "CupPoints12")
round(cor(nooutlier[,vars]), digits = 3)
bike = df(BullRiders)
bike = data.frame(BullRiders)
bike
plot(bike$Earnings12,bike$RidePer12)
plot(bike$Earnings12,bike$CupPoints12)
abline(lm(bike$CupPoints12~bike$Earnings12), col="red")
cor(bike$Earnings12,bike$Rides12)
cor(bike$Earnings12,bike$CupPoints12)
cor(bike$Earnings12,bike$CupPoints12, digits = 3)
round(cor(bike$Earnings12,bike$CupPoints12), digits = 3)
vars <-c("Earnings12", "CupPoints12")
round(cor(nooutlier[,vars]), digits = 3)
nooutlier <- new_bull12[new_bull12$Earnings12 < 1000000 ,]
vars <-c("Earnings12", "CupPoints12")
round(cor(nooutlier[,vars]), digits = 3)
nooutlier <- bike[bike$Earnings12 < 1000000 ,]
vars <-c("Earnings12", "CupPoints12")
round(cor(nooutlier[,vars]), digits = 3)
round(cor(bike$Earnings12,bike$CupPoints12), digits = 3)
cor(bike$Earnings12,bike$Rides12)
vars <-c("Earnings12", "RidePer12")
round(cor(nooutlier[,vars]), digits = 3)
library(readr)
AustinCityLimits <- read_csv("D:/Study/3rd Sem/IDS/AustinCityLimits.csv")
View(AustinCityLimits)
males<-sqldf('select * from acl where Gender = "M" ')
library(sqldf)
install.packages("sqldf")
males<-sqldf('select * from acl where Gender = "M" ')
nrow(artist)
nrow(AustinCityLimits)
males<-sqldf('select * from AustinCityLimits where Gender = "M" ')
austin_city_limits = read.csv('AustinCityLimits.csv')
table(AustinCityLimits$Gender)
table(AustinCityLimits$Season)
table(AustinCityLimits$Genre)
table(AustinCityLimits$Grammy)
table(AustinCityLimits$Grammy, AustinCityLimits$Genre, AustinCityLimits$Gender)
cor(AustinCityLimits$CupPoints12, AustinCityLimits$Earnings12)
barplot(table(AustinCityLimits$Grammy, AustinCityLimits$Genre),
main="Grammy Count",
xlab="Grammies",
ylab="Count",
border="red",
col= c("red","green"))
prop.table(table(AustinCityLimits$Grammy, AustinCityLimits$Genre))
male_genre_grammy<-table(males$Grammy, males$Genre)
install.packages(labstats)
.packages()
.packages(all.available = TRUE)
install.packages("labstats")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
my_n = 42.4
my_c = Universal
my_c = "Universal"
my_l = FALSE
my_n
my_c
my_l
class(my_c)
class(my_n)
class(my_l)
is.numeric(my_l)
my_ll = FALSE
my_ll = false
my_ll = F
class(my_ll)
my_n = my_n + 5
my_c = my_c + 5
my_c = my_c + "truth"
paste(my_c, "truth")
libPaths()
d = as.logical(d)
d = TRUE
class(d)
class(d)
d = T
print(a)
class(d)
d = as.logical(d)
d
a = rep(1,10)
a
a = 10
b = 15
c = c(a,b)
c
my_fruits = c(apple = 1, guava = 1, strawberry = 10)
my_fruits
fruits = c("apple", "orange", "banana")
fruits
alphabets = LETTERS[1:26]
alphabets
b = c(1,1,0,0,0)
b = as.logical(b)
b
b = c(1,1,0,0,0)
b = as.logical(b)
c = c(10, TRUE)
c
class(c)
c = (1,2,"red","orange")
c = c(1,2,"red","orange")
c
class(c)
is.vector(c)
is.vector(colors)
is.vector(i)
is.vector(a)
is.vector(my_c)
a = c(10,20,30,40,50)
b = c("Eng", "Kann", "Mat", "Sci", "Social")
names(a) = b > a
names
names(a)
a
a
a[2]
a[1:3]
a[-3]
a[-4]
a[-4]
a[-1]
a[c(1,2,5)]
a[a>3]
x = c(0,1,2,3,4)
y = 1:5
z = 1:50
x + y
x * y
x * z
x = 6
y = 3
x %% y
x %/% y
!x
x = c(1:10)
(x >= 10)|(x<10)
a = c()
a
class(a)
is.vector(a)
is.vector(x\)
is.vector(x)
rep(0,3)
a = factor(c("1","2","5","5"))
a
is.vector(a)
is.factor(a)
x = matrix(0,2,2)
x
class(x)
is.matrix(x)
mat1 = matrix(1:6, nrow = 3)
mat1
mat1 = matrix(1:6, ncol = 3)
mat1
mat1 = matrix(1:6, nrow = 3)
mat1 = matrix(1:6, nrow = 2, byrow = FALSE)
mat1
mat1 = matrix(1:6, nrow = 2, byrow = TRUE)
mat1
fix(mat1)
mat1[,1]
mat1[2,]
mat1[1,2]
mat1[,-3]
mat1[-2,]
rbind(mat1, 7:9)
cbind(mat1, c(10,15,12))
cbind(mat1, c(10,15))
mat1
is.list(a)
a = list("Teachers",3,c("Radha","Krishna","Rama"))
a
is.list(a)
a[[3]]
a[[1]]
a[2]
a[[3]][1]
L = LETTERS[1:4]
X = 1:4
l
L
X
a = data.frame(X,L)
a
a$X
a$L
is.data.frame(a)
is.data.frame(L)
str(a)
nrow(a)
dim(a)
weekdays = vector(c("Mon","Tue","Wed","Thurs","Fri","Sat","Sun"))
weekdays = c("Mon","Tue","Wed","Thurs","Fri","Sat","Sun")
weekdays
temp = weekdays
temp
temp = c(10,20,30,40,50,60,70)
temp
class(temp)
is.vector(temp)
sale = c(20,30,40,50,60,70,80)
sale
soi = data.frame(weekdays,temp,sale)
soi
weekdays = as.factor(weekdays)
weekdays
class(weekdays)
soi[[2]]
soi[[1]][[3]]
a = 1:10
head(a,5)
tail(5)
tail(5,5)
a
tail(a,5)
view(a)
soi
View(soi)
tail(soi)
is.vector(soi)
class(soi)
barplot(soi)
soi = as.vector(soi)
class(soi)
is.vector(soi)
a = 10
b = 5
if(a > b)
{
print("A is greater than B")
}else
{
print("B is greater than A")
}
trunc(5.99)
trunc(5.2)
trunc(5.999999999999999999999)
trunc(5.99999)
trunc(5.999999)
trunc(5.9999999)
trunc(5.99999999)
trunc(5.999999999)
trunc(5.9999999999)
trunc(5.99999999999)
trunc(5.999999999999)
trunc(5.9999999999999)
trunc(5.99999999999999)
trunc(5.999999999999999)
trunc(5.9999999999999999)
names = c("Vijay","Ayush","Sudhanva")
age = c(23,22,23)
salary = c(100000,200000,300000)
employees = data.frame(names = c("Vijay","Ayush","Sudhanva"), age = c(23, 22, 23), salary = c("100000","200000","300000"))
employees
findHighSalary = function(df)
{
Maxsal = 0
names = ""
for(i in 1:nrow((employees)))
{
tmpsal = as.numeric(employees[1,3])
if(tmpsal > Maxsal)
{
Maxsal = tmpsal
names = employees[i,1]
}
}
return(as.character((names)))
}
findHighSalary(employees)
View(BikeData)
cor(BikeData$distane,BikeData$time)
cor(BikeData$distance,BikeData$time)
view(BikeData)
library(readr)
BikeData <- read_csv("D:/Study/3rd Sem/IDS/BikeData.csv")
View(BikeData)
student <- BikeData[BikeData$student==1,]
student
View(BikeData)
cor(BikeData$distance,BikeData$time)
#Error in cor(BikeData$distane, BikeData$time) : 'x' must be numeric
cor(BikeData$distance,BikeData$time)
plot(BikeData$distance,BikeData$time)
abline(lm(BikeData$time~BikeData$distance))
cor(BikeData$distance,BikeData$speed)
plot(BikeData$distance,BikeData$speed)
cor(BikeData$time,BikeData$speed)
plot(BikeData$time,BikeData$speed)
abline(lm(BikeData$time~BikeData$speed))
k1=BikeData[,c(2,7:9)]
head(k1)
cor(k1)
abline(lm(y~x))
plot(BikeData$distance,BikeData$speed)
text(BikeData$distance~BikeData$speed,labels=BikeData$user_id,cex=0.4,offset=10)
plot(BikeData$distance,BikeData$speed)
text(BikeData$distance~BikeData$speed,labels=BikeData$user_id,cex=0.7,offset=10)
plot(BikeData$distance,BikeData$speed)
text(BikeData$distance~BikeData$speed,labels=BikeData$user_id,cex=0.9,offset=10)
result=corr(k1)
corrplot(result,method="circle",type="upper")
install.packages("corrplot")
corrplot(result,method="circle",type="upper")
plot(BikeData$distance,BikeData$speed,col="red")
which(BikeData$speed==max(BikeData))
prop.table(table())
library(readr)
movies <- read_csv("C:/Users/Vijaykumar R Pai.LAPTOP-C26T1P75/Downloads/movies.csv")
View(movies)
ncol(movies)
nrow(movies)
ncol(subset(movies$genre='comedy' & movies$genre='crime'))
ncol(subset(movies$genre=comedy & movies$genre=crime))
ncol(subset(movies$genre=comedy))
ncol(subset(movies$genre))
movies = data.frame(movies)
cbind(mat1, c(10,15,12))
fix(movies)
cbind(movies, profit = gross - budget)
movies<-read.csv("movies.csv")
profit = movies$gross - movies$budget
profit = movies$gross - movies$budget
table(movies)
table(movies$gross, movies$budget)
profit = c(movies$gross - movies$budget)
View(movies)
nrow(movies)
library(readr)
movies <- read_csv("C:/Users/Vijaykumar R Pai.LAPTOP-C26T1P75/Downloads/movies.csv")
View(movies)
profit = c(movies$gross - movies$budget)
profit
cbind(movies,profit)
plot(movies$profit,movies$rating)
summary(movies)
ncol(subset(movies$comedy))
ncol(subset(movies$genre))
subset(movies$genre)
subset.matrix(movies$genre)
subset.data.frame(movies$genre)
ncol(subset(movies$genre))
ncol(subset.default(movies,movies$genre))
ncol(subset.default(movies$genre))
ncol(movies)
nrow(movies)
nrow(subset(movies[1:2961,],genre =='Comedy'))
nrow(subset(movies[1:2961,],genre =='crime'))
nrow(subset(movies[1:2961,],genre =='Comedy' && genre == 'crime'))
subset(movies, movies$genre == 'Comedy' & movies$genre == 'Crime')[1,'speed']
subset(movies, movies$genre == 'Comedy' & movies$genre == 'Crime')
nrow(subset(movies, movies$genre == 'Comedy' & movies$genre == 'Crime'))
nrow(subset(movies, movies$genre == 'Comedy' && movies$genre == 'Crime'))
subset(movies, movies$genre == 'Comedy' & movies$genre == 'Crime')
demo()
licence()
14-13.66
6.5-5
library(readr)
WorldRecords <- read_csv("D:/Study/3rd Sem/IDS/WorldRecords.csv")
View(WorldRecords)
install.packages("C:/Users/Vijaykumar R Pai.LAPTOP-C26T1P75/Downloads/SDSFoundations_1.1.tgz", repos = NULL, type = .Platform$pkgType)
World_records = read.csv(WorldRecords)
World_records = read.csv(WorldRecords.csv)
World_records = read.csv('WorldRecords.csv')
World_records = read.csv('WorldRecords.csv')
setwd("D:/Study/3rd Sem/IDS")
setwd("D:/Study/3rd Sem/IDS")
World_records = read.csv('WorldRecords.csv')
View(WorldRecords)
View(World_records)
world_records_mile = World_records[(World_records$Event == 'Mens Mile' | World_records$Event == 'Womens Mile')]
